{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/sheets.ts"],"sourcesContent":["\n'use server';\n\nimport { google } from 'googleapis';\nimport type { sheets_v4 } from 'googleapis';\n\n// Define the structure of a row in your sheet\nexport interface SheetRow {\n  'Donor/Opp': string;\n  'Action/Next Step': string;\n  Lead: string;\n  Priority: 'High' | 'Medium' | 'Low';\n  Probability: 'High' | 'Medium' | 'Low';\n}\n\n// Environment variables\nconst SHEET_ID = process.env.GOOGLE_SHEET_ID;\nconst SERVICE_ACCOUNT_EMAIL = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;\nconst SHEET_RANGE = process.env.GOOGLE_SHEET_RANGE || 'Sheet1!A:E'; // Default range if not specified\n\nlet PRIVATE_KEY: string | undefined;\nconst rawPrivateKeyFromEnv = process.env.GOOGLE_PRIVATE_KEY;\n\nif (rawPrivateKeyFromEnv && rawPrivateKeyFromEnv.trim() !== '') {\n    let processedEnvVar = rawPrivateKeyFromEnv.trim();\n    // Strip surrounding quotes if present (common for multi-line env vars)\n    if ((processedEnvVar.startsWith('\"') && processedEnvVar.endsWith('\"')) ||\n        (processedEnvVar.startsWith(\"'\") && processedEnvVar.endsWith(\"'\"))) {\n        processedEnvVar = processedEnvVar.substring(1, processedEnvVar.length - 1);\n    }\n\n    // Now, process for escaped newlines and then trim again\n    let key = processedEnvVar.replace(/\\\\n/g, '\\n').trim();\n\n    // Validate basic PEM structure.\n    if (key.startsWith('-----BEGIN PRIVATE KEY-----') && key.endsWith('-----END PRIVATE KEY-----')) {\n        // Further check: ensure there's content between header and footer\n        const coreKeyContent = key.substring('-----BEGIN PRIVATE KEY-----'.length, key.length - '-----END PRIVATE KEY-----'.length).trim();\n        if (coreKeyContent.length > 0) {\n            PRIVATE_KEY = key;\n        } else {\n            console.warn(\n                'GOOGLE_PRIVATE_KEY appears to have valid PEM markers but no actual key content in between after processing. Sheet operations will fail.' +\n                `\\n  Original GOOGLE_PRIVATE_KEY (trimmed, first 30 chars): \"${(rawPrivateKeyFromEnv || \"\").trim().substring(0, Math.min(30, (rawPrivateKeyFromEnv || \"\").trim().length))}\"`\n            );\n            PRIVATE_KEY = undefined;\n        }\n    } else {\n        console.warn(\n            'GOOGLE_PRIVATE_KEY environment variable appears malformed after processing. It will not be used. Sheet operations may fail.' +\n            `\\n  Problem: Did not pass PEM marker (-----BEGIN/END PRIVATE KEY-----) checks.` +\n            `\\n  Processed key (after potential quote stripping & newline conversion) starts with: \"${key.substring(0, Math.min(30, key.length))}\"` +\n            `\\n  Processed key ends with: \"${key.substring(Math.max(0, key.length - 30))}\"` +\n            `\\n  Length of this processed key string: ${key.length}` +\n            `\\n  Original GOOGLE_PRIVATE_KEY (trimmed, first 30 chars): \"${(rawPrivateKeyFromEnv || \"\").trim().substring(0, Math.min(30, (rawPrivateKeyFromEnv || \"\").trim().length))}\"` +\n            `\\n  Hint: Check for missing PEM markers, extra characters, or incorrect newline escaping in your .env.local file for GOOGLE_PRIVATE_KEY.`\n        );\n        PRIVATE_KEY = undefined;\n    }\n} else {\n    // console.warn('GOOGLE_PRIVATE_KEY is not set, empty, or only whitespace in environment variables. PRIVATE_KEY will be undefined.');\n    PRIVATE_KEY = undefined;\n}\n\n// Initial check for logging purposes; actual guard is in getSheetsClient\n(() => {\n  const missingVarsWarn = [];\n  if (!SHEET_ID) missingVarsWarn.push('GOOGLE_SHEET_ID');\n  if (!SERVICE_ACCOUNT_EMAIL) missingVarsWarn.push('GOOGLE_SERVICE_ACCOUNT_EMAIL');\n  \n  if (!PRIVATE_KEY) { \n    if (!rawPrivateKeyFromEnv || rawPrivateKeyFromEnv.trim() === '' || rawPrivateKeyFromEnv.trim() === '\"\"' || rawPrivateKeyFromEnv.trim() === \"''\") {\n      // This case is normal if env vars are not set up yet. Avoid spamming console for this specific state.\n    } else {\n      // This case means rawPrivateKeyFromEnv was set, but PRIVATE_KEY is still undefined,\n      // implying formatting or PEM marker checks failed. The detailed warning above already covered this.\n      missingVarsWarn.push('GOOGLE_PRIVATE_KEY (set but failed formatting/PEM checks - see detailed warning above)');\n    }\n  }\n  if (missingVarsWarn.length > 0) {\n    console.warn(\n      `SheetSync Initialization Warning: One or more Google Sheets API credentials are problematic. Sheet operations are likely to fail. Problematic variables: [${missingVarsWarn.join(', ')}]`\n    );\n  }\n})();\n\n\nexport async function getSheetsClient(): Promise<sheets_v4.Sheets | null> {\n  if (!SHEET_ID || !SERVICE_ACCOUNT_EMAIL || !PRIVATE_KEY) {\n    const errorParts = ['Cannot initialize Sheets client due to missing/invalid credentials:'];\n    if (!SHEET_ID) errorParts.push('- GOOGLE_SHEET_ID is not set.');\n    if (!SERVICE_ACCOUNT_EMAIL) errorParts.push('- GOOGLE_SERVICE_ACCOUNT_EMAIL is not set.');\n    if (!PRIVATE_KEY) {\n      if (!rawPrivateKeyFromEnv) errorParts.push('- GOOGLE_PRIVATE_KEY is not set.');\n      else if (rawPrivateKeyFromEnv.trim() === '' || rawPrivateKeyFromEnv.trim() === '\"\"' || rawPrivateKeyFromEnv.trim() === \"''\") errorParts.push('- GOOGLE_PRIVATE_KEY is set but is empty or only whitespace.');\n      else errorParts.push('- GOOGLE_PRIVATE_KEY is set but was malformed or failed structural/PEM checks (see previous warnings).');\n    }\n    console.error(errorParts.join('\\n  '));\n    return null;\n  }\n\n  try {\n    const auth = new google.auth.GoogleAuth({\n      credentials: {\n        client_email: SERVICE_ACCOUNT_EMAIL,\n        private_key: PRIVATE_KEY,\n      },\n      scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n    });\n\n    return google.sheets({ version: 'v4', auth });\n  } catch (error) {\n    console.error('Error initializing Google Auth client:', error);\n    if (error instanceof Error && (error.message.includes('DECODER routines') || error.message.includes('PEM routines') || error.message.includes('private key') || error.message.includes('asn1 encoding'))) {\n        console.error(\n          'This error during auth initialization often indicates an issue with the GOOGLE_PRIVATE_KEY format or value even after initial checks. Ensure it is a valid PEM-formatted private key. The key might have passed basic structural checks but is still not parsable by the crypto library.'\n        );\n    }\n    return null;\n  }\n}\n\nexport async function getSheetData(): Promise<SheetRow[]> {\n  const sheets = await getSheetsClient();\n  if (!sheets) {\n     // console.warn('Google Sheets client is not available (possibly due to configuration issues). Returning empty data for dashboard.');\n     return [];\n  }\n  if (!SHEET_ID){ \n    // console.warn('GOOGLE_SHEET_ID is not configured. Returning empty data for dashboard.');\n    return [];\n  }\n\n  try {\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: SHEET_ID,\n      range: SHEET_RANGE,\n    });\n\n    const rows = response.data.values;\n    if (!rows || rows.length === 0) {\n      // console.log('No data found in the specified sheet range or sheet is empty.');\n      return [];\n    }\n\n    const headers = rows[0].map(header => String(header).trim());\n    const dataRows = rows.slice(1);\n\n    const expectedHeaders = ['Donor/Opp', 'Action/Next Step', 'Lead', 'Priority', 'Probability'];\n    const missingHeaders = expectedHeaders.filter(eh => !headers.includes(eh));\n    if (missingHeaders.length > 0) {\n       // console.warn(`Sheet is missing expected headers: [${missingHeaders.join(', ')}]. Current headers: [${headers.join(', ')}]. Data mapping might be incorrect or incomplete.`);\n    }\n\n    return dataRows.map((row) => {\n      const rowData: Partial<SheetRow> = {};\n      headers.forEach((header, index) => {\n        const cellValue = row[index] !== undefined && row[index] !== null ? String(row[index]) : ''; \n\n        if (expectedHeaders.includes(header)) { \n            if ((header === 'Priority' || header === 'Probability')) {\n               const value = cellValue.trim();\n               if (['High', 'Medium', 'Low'].includes(value)) {\n                  rowData[header as keyof SheetRow] = value as 'High' | 'Medium' | 'Low';\n               } else {\n                  if (value !== '') {\n                    // console.warn(`Invalid value \"${value}\" for ${header} in row. Defaulting to Medium.`);\n                  }\n                  rowData[header as keyof SheetRow] = 'Medium'; // Default if invalid or empty\n               }\n            } else {\n               rowData[header as keyof SheetRow] = cellValue;\n            }\n        }\n      });\n      // Ensure all expected keys exist, even if not in sheet headers or row is shorter\n      expectedHeaders.forEach(eh => {\n        const key = eh as keyof SheetRow;\n        if (!(key in rowData)) {\n          if (key === 'Priority' || key === 'Probability') {\n            rowData[key] = 'Medium'; \n          } else {\n            rowData[key] = ''; \n          }\n        }\n      });\n      return rowData as SheetRow;\n    }).filter(row => Object.values(row).some(val => typeof val === 'string' && val.trim() !== '')); // Filter out completely empty effective rows\n\n\n  } catch (error) {\n    console.error('Error fetching sheet data from Google Sheets API:', error);\n    if (error instanceof Error && error.message.includes('PERMISSION_DENIED')) {\n        console.error(`Permission denied. Ensure the service account (${SERVICE_ACCOUNT_EMAIL}) has at least read access to the Google Sheet (${SHEET_ID}).`);\n    } else if (error instanceof Error && error.message.includes('Requested entity was not found')) {\n        console.error(`Sheet or range not found. Verify GOOGLE_SHEET_ID (${SHEET_ID}) and GOOGLE_SHEET_RANGE (${SHEET_RANGE}).`);\n    } else if (error instanceof Error && (error.message.includes('UNAUTHENTICATED') || error.message.includes('invalid_grant'))) {\n        console.error('Authentication failed. This could be due to an invalid service account email, private key, or incorrect project setup.');\n    } else if (error instanceof Error && (error.message.includes('DECODER routines') || error.message.includes('PEM routines'))) {\n        console.error('A cryptographic error occurred, often related to a malformed private key. Ensure GOOGLE_PRIVATE_KEY is correctly formatted in your environment.');\n    }\n    return []; \n  }\n}\n\nexport async function appendSheetRow(rowData: Omit<SheetRow, ''>): Promise<boolean> {\n  const sheets = await getSheetsClient();\n   if (!sheets) {\n      console.error(\"Cannot append row: Google Sheets client not available (possibly due to configuration issues).\");\n      return false;\n   }\n   if (!SHEET_ID) { \n     console.error(\"Cannot append row: GOOGLE_SHEET_ID is not configured.\");\n     return false;\n   }\n\n  const values = [\n    rowData['Donor/Opp'],\n    rowData['Action/Next Step'],\n    rowData.Lead,\n    rowData.Priority,\n    rowData.Probability\n  ];\n\n  try {\n    await sheets.spreadsheets.values.append({\n      spreadsheetId: SHEET_ID,\n      range: SHEET_RANGE, \n      valueInputOption: 'USER_ENTERED', \n      insertDataOption: 'INSERT_ROWS', \n      requestBody: {\n        values: [values],\n      },\n    });\n    console.log('Row appended successfully to Google Sheet.');\n    return true;\n  } catch (error) {\n    console.error('Error appending sheet row to Google Sheets API:', error);\n     if (error instanceof Error && error.message.includes('PERMISSION_DENIED')) {\n        console.error(`Permission denied. Ensure the service account (${SERVICE_ACCOUNT_EMAIL}) has write access to the Google Sheet (${SHEET_ID}).`);\n    } else if (error instanceof Error && (error.message.includes('UNAUTHENTICATED') || error.message.includes('invalid_grant'))) {\n        console.error('Authentication failed while appending. Check service account credentials and permissions.');\n    }\n    return false;\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport type { ReadonlyRequestCookies } from 'next/dist/server/web/spec-extension/adapters/request-cookies';\n\nconst AUTH_COOKIE_NAME = 'sheetsync_auth';\nconst ADMIN_USERNAME = process.env.ADMIN_USERNAME;\nconst ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;\n\nif (!ADMIN_USERNAME || !ADMIN_PASSWORD) {\n  console.warn('Admin credentials are not set in environment variables. Admin login will not work.');\n}\n\nexport function checkCredentials(username?: string | null, password?: string | null): boolean {\n  if (!ADMIN_USERNAME || !ADMIN_PASSWORD) {\n    return false; // Cannot authenticate if credentials aren't set\n  }\n  return username === ADMIN_USERNAME && password === ADMIN_PASSWORD;\n}\n\nexport async function setAuthCookie(): Promise<void> {\n  const cookieStore = cookies();\n  cookieStore.set(AUTH_COOKIE_NAME, 'true', {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    path: '/admin', // Restrict cookie to admin paths\n    sameSite: 'lax',\n    maxAge: 60 * 60 * 24, // 24 hours validity\n  });\n}\n\nexport async function clearAuthCookie(): Promise<void> {\n  const cookieStore = cookies();\n  cookieStore.delete(AUTH_COOKIE_NAME);\n}\n\nexport function isAuthenticated(cookieStore?: ReadonlyRequestCookies): boolean {\n  const store = cookieStore || cookies();\n  const authCookie = store.get(AUTH_COOKIE_NAME);\n  return authCookie?.value === 'true';\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAGA,MAAM,mBAAmB;AACzB,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AACjD,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AAEjD,IAAI,CAAC,kBAAkB,CAAC,gBAAgB;IACtC,QAAQ,IAAI,CAAC;AACf;AAEO,SAAS,iBAAiB,QAAwB,EAAE,QAAwB;IACjF,IAAI,CAAC,kBAAkB,CAAC,gBAAgB;QACtC,OAAO,OAAO,gDAAgD;IAChE;IACA,OAAO,aAAa,kBAAkB,aAAa;AACrD;AAEO,eAAe;IACpB,MAAM,cAAc,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAC1B,YAAY,GAAG,CAAC,kBAAkB,QAAQ;QACxC,UAAU;QACV,QAAQ,oDAAyB;QACjC,MAAM;QACN,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;AACF;AAEO,eAAe;IACpB,MAAM,cAAc,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAC1B,YAAY,MAAM,CAAC;AACrB;AAEO,SAAS,gBAAgB,WAAoC;IAClE,MAAM,QAAQ,eAAe,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IACnC,MAAM,aAAa,MAAM,GAAG,CAAC;IAC7B,OAAO,YAAY,UAAU;AAC/B","debugId":null}},
    {"offset": {"line": 467, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/validators.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, 'Username is required'),\n  password: z.string().min(1, 'Password is required'),\n});\n\nexport type LoginFormData = z.infer<typeof loginSchema>;\n\nexport const sheetRowSchema = z.object({\n  'Donor/Opp': z.string().min(1, 'Donor/Opportunity is required'),\n  'Action/Next Step': z.string().min(1, 'Action/Next Step is required'),\n  Lead: z.string().min(1, 'Lead is required'),\n  Priority: z.enum(['High', 'Medium', 'Low'], {\n    errorMap: () => ({ message: 'Please select a valid priority' }),\n  }),\n  Probability: z.enum(['High', 'Medium', 'Low'], {\n    errorMap: () => ({ message: 'Please select a valid probability' }),\n  }),\n});\n\nexport type SheetRowFormData = z.infer<typeof sheetRowSchema>;\n\n// Schema for Google Sheet Configuration Form\nexport const sheetConfigSchema = z.object({\n    sheetId: z.string().min(10, 'Sheet ID seems too short. Please check the copied ID.').trim(),\n    sheetRange: z.string()\n                .min(3, 'Sheet range is required (e.g., Sheet1!A:E)')\n                .regex(/^[a-zA-Z0-9\\s]+!([A-Z]+):([A-Z]+)$/, 'Invalid range format. Expected format like \"Sheet1!A:E\" with uppercase column letters.'),\n    serviceAccountEmail: z.string().email('Invalid service account email format. Please enter a valid email address.'),\n    privateKey: z.string()\n        .transform(key => {\n            // 1. Replace literal \"\\\\n\" (escaped newlines common in JSON strings) with actual newline characters.\n            let processedKey = key.replace(/\\\\n/g, '\\n');\n            // 2. Normalize Windows-style newlines (\\r\\n) to Unix-style newlines (\\n).\n            processedKey = processedKey.replace(/\\r\\n/g, '\\n');\n            // 3. Trim any leading/trailing whitespace from the entire key block.\n            processedKey = processedKey.trim();\n            return processedKey;\n        })\n        .pipe(\n            z.string()\n            .min(100, 'Private key is too short. Ensure you have copied the full key from the JSON file.')\n            .startsWith('-----BEGIN PRIVATE KEY-----', 'Private key must start with \"-----BEGIN PRIVATE KEY-----\". Check for missing parts or extra characters at the beginning.')\n            .endsWith('-----END PRIVATE KEY-----', 'Private key must end with \"-----END PRIVATE KEY-----\". Check for missing parts or extra characters at the end.')\n            .refine(key => key.includes('\\n'), { message: \"Private key must be a multi-line string. Ensure newlines are preserved when copying.\" })\n            .refine(key => {\n                // Check for common errors like pasting the entire JSON key-value pair or including quotes\n                // These checks are against the already transformed key (e.g. outer quotes should be removed by .trim())\n                if (key.startsWith('\"-----BEGIN PRIVATE KEY-----') || key.startsWith(\"'-----BEGIN PRIVATE KEY-----\")) {\n                    return false;\n                }\n                if (key.includes('\"private_key\":') || key.includes(\"'private_key':\")) {\n                    return false;\n                }\n                // Ensure there's content between the header and footer\n                const coreKey = key.replace('-----BEGIN PRIVATE KEY-----', '').replace('-----END PRIVATE KEY-----', '').trim();\n                return coreKey.length > 0;\n            }, {message: \"It looks like you might have pasted more than just the private key string, or the key content is empty. Please paste only the characters starting with -----BEGIN PRIVATE KEY----- and ending with -----END PRIVATE KEY-----.\"})\n        ),\n});\n\nexport type SheetConfigFormData = z.infer<typeof sheetConfigSchema>;\n\n"],"names":[],"mappings":";;;;;AAAA;;AAEO,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,MAAM,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACtC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,UAAU,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAM,EAAE;QAC1C,UAAU,IAAM,CAAC;gBAAE,SAAS;YAAiC,CAAC;IAChE;IACA,aAAa,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAM,EAAE;QAC7C,UAAU,IAAM,CAAC;gBAAE,SAAS;YAAoC,CAAC;IACnE;AACF;AAKO,MAAM,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,yDAAyD,IAAI;IACzF,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GACP,GAAG,CAAC,GAAG,8CACP,KAAK,CAAC,sCAAsC;IACzD,qBAAqB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACtC,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GACf,SAAS,CAAC,CAAA;QACP,qGAAqG;QACrG,IAAI,eAAe,IAAI,OAAO,CAAC,QAAQ;QACvC,0EAA0E;QAC1E,eAAe,aAAa,OAAO,CAAC,SAAS;QAC7C,qEAAqE;QACrE,eAAe,aAAa,IAAI;QAChC,OAAO;IACX,GACC,IAAI,CACD,oIAAA,CAAA,IAAC,CAAC,MAAM,GACP,GAAG,CAAC,KAAK,qFACT,UAAU,CAAC,+BAA+B,4HAC1C,QAAQ,CAAC,6BAA6B,kHACtC,MAAM,CAAC,CAAA,MAAO,IAAI,QAAQ,CAAC,OAAO;QAAE,SAAS;IAAuF,GACpI,MAAM,CAAC,CAAA;QACJ,0FAA0F;QAC1F,wGAAwG;QACxG,IAAI,IAAI,UAAU,CAAC,mCAAmC,IAAI,UAAU,CAAC,iCAAiC;YAClG,OAAO;QACX;QACA,IAAI,IAAI,QAAQ,CAAC,qBAAqB,IAAI,QAAQ,CAAC,mBAAmB;YAClE,OAAO;QACX;QACA,uDAAuD;QACvD,MAAM,UAAU,IAAI,OAAO,CAAC,+BAA+B,IAAI,OAAO,CAAC,6BAA6B,IAAI,IAAI;QAC5G,OAAO,QAAQ,MAAM,GAAG;IAC5B,GAAG;QAAC,SAAS;IAA+N;AAExP","debugId":null}},
    {"offset": {"line": 537, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { checkCredentials, setAuthCookie, clearAuthCookie } from './auth';\nimport { loginSchema, sheetRowSchema, sheetConfigSchema } from './validators'; // Added sheetConfigSchema\nimport { appendSheetRow, getSheetsClient } from './sheets'; // Added getSheetsClient\nimport type { SheetRowFormData, SheetConfigFormData } from './validators'; // Added SheetConfigFormData\n\nexport type FormState = {\n  message: string;\n  success: boolean;\n  errors?: Record<string, string[] | undefined>;\n  details?: string; // Optional details field for test connection\n};\n\nexport async function loginAction(\n  prevState: FormState | null,\n  formData: FormData\n): Promise<FormState> {\n  try {\n    const parsed = loginSchema.safeParse({\n      username: formData.get('username'),\n      password: formData.get('password'),\n    });\n\n    if (!parsed.success) {\n      return {\n        message: 'Invalid form data.',\n        success: false,\n        errors: parsed.error.flatten().fieldErrors,\n      };\n    }\n\n    const { username, password } = parsed.data;\n\n    if (checkCredentials(username, password)) {\n      await setAuthCookie();\n      revalidatePath('/admin'); // Revalidate admin path to trigger UI update after login\n      return { message: 'Login successful!', success: true };\n    } else {\n      return { message: 'Invalid username or password.', success: false };\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    return { message: 'An unexpected error occurred during login.', success: false };\n  }\n}\n\nexport async function logoutAction(): Promise<void> {\n   await clearAuthCookie();\n   revalidatePath('/admin'); // Revalidate admin path to trigger UI update after logout\n}\n\n\nexport async function submitDataAction(\n  prevState: FormState | null,\n  formData: FormData\n): Promise<FormState> {\n\n  try {\n    const parsed = sheetRowSchema.safeParse({\n      'Donor/Opp': formData.get('Donor/Opp'),\n      'Action/Next Step': formData.get('Action/Next Step'),\n      Lead: formData.get('Lead'),\n      Priority: formData.get('Priority'),\n      Probability: formData.get('Probability'),\n    });\n\n    if (!parsed.success) {\n       console.log(\"Validation errors:\", parsed.error.flatten().fieldErrors);\n      return {\n        message: 'Invalid form data. Please check the fields.',\n        success: false,\n        errors: parsed.error.flatten().fieldErrors,\n      };\n    }\n\n    const dataToAppend: SheetRowFormData = parsed.data;\n\n    if (!process.env.GOOGLE_SHEET_ID || !process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || !process.env.GOOGLE_PRIVATE_KEY) {\n        return { message: 'Google Sheet connection is not configured on the server.', success: false };\n    }\n\n    const success = await appendSheetRow(dataToAppend);\n\n    if (success) {\n      revalidatePath('/'); // Revalidate the homepage cache to show the new data\n      // revalidatePath('/admin'); // Commented out: Also revalidate admin page, this might be causing logout issues.\n      // The dashboard on the admin page might not update immediately, but this should prevent logout.\n      return { message: 'Data submitted successfully!', success: true };\n    } else {\n      return { message: 'Failed to submit data to Google Sheet. Please check the server console logs for more specific error details from the Google Sheets API.', success: false };\n    }\n  } catch (error) {\n    console.error('Submit data error:', error);\n    return { message: 'An unexpected error occurred while submitting data.', success: false };\n  }\n}\n\n\nexport async function saveSheetConfigAction(\n  prevState: FormState | null,\n  formData: FormData\n): Promise<FormState> {\n  try {\n    const parsed = sheetConfigSchema.safeParse({\n      sheetId: formData.get('sheetId'),\n      sheetRange: formData.get('sheetRange'),\n      serviceAccountEmail: formData.get('serviceAccountEmail'),\n      privateKey: formData.get('privateKey'),\n    });\n\n    if (!parsed.success) {\n       console.log(\"Config Validation errors:\", parsed.error.flatten().fieldErrors);\n      return {\n        message: 'Invalid configuration data. Please check the fields.',\n        success: false,\n        errors: parsed.error.flatten().fieldErrors,\n      };\n    }\n\n    const configData: SheetConfigFormData = parsed.data;\n\n    // This action now primarily serves to validate the format and generate the .env.local preview.\n    // It does not save anything persistently on the server itself.\n    // The user is responsible for updating .env.local and restarting.\n    console.log('Received valid sheet configuration data for .env.local preview generation:', {\n        sheetId: configData.sheetId,\n        sheetRange: configData.sheetRange,\n        serviceAccountEmail: configData.serviceAccountEmail,\n        privateKey: '[REDACTED - validated but not stored by this action]', \n    });\n    \n    // Revalidate admin to reflect any UI changes potentially related to config form state,\n    // but the actual server config relies on env vars restart.\n    revalidatePath('/admin'); \n\n    return {\n        message: 'Configuration format validated successfully. The preview for .env.local has been generated. Copy the content into your .env.local file and restart/redeploy the server for these settings to be used by the application backend.',\n        success: true\n    };\n\n  } catch (error) {\n    console.error('Save sheet config error:', error);\n    return { message: 'An unexpected error occurred while validating the configuration for preview.', success: false };\n  }\n}\n\nexport async function testSheetConnectionAction(\n  prevState: FormState | null\n): Promise<FormState> {\n  const missingEnvVars = [];\n  if (!process.env.GOOGLE_SHEET_ID) missingEnvVars.push('GOOGLE_SHEET_ID');\n  if (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL) missingEnvVars.push('GOOGLE_SERVICE_ACCOUNT_EMAIL');\n  if (!process.env.GOOGLE_PRIVATE_KEY || process.env.GOOGLE_PRIVATE_KEY.trim() === '' || process.env.GOOGLE_PRIVATE_KEY.trim() === '\"\"' || process.env.GOOGLE_PRIVATE_KEY.trim() === \"''\") missingEnvVars.push('GOOGLE_PRIVATE_KEY');\n  if (!process.env.GOOGLE_SHEET_RANGE) missingEnvVars.push('GOOGLE_SHEET_RANGE');\n\n  if (missingEnvVars.length > 0) {\n    return {\n      success: false,\n      message: 'Connection test failed: Server is missing required environment variables.',\n      details: `Missing: ${missingEnvVars.join(', ')}. Please ensure these are set in your .env.local file or hosting environment and the server is restarted. The private key must be the actual key, not an empty string.`,\n    };\n  }\n\n  const sheets = await getSheetsClient();\n  if (!sheets) {\n    return {\n      success: false,\n      message: 'Connection test failed: Could not initialize Google Sheets client.',\n      details: 'This usually indicates an issue with the service account credentials (email or private key format/value) or their parsing. Check server logs for more specific errors related to Google Auth initialization. Ensure GOOGLE_PRIVATE_KEY is correctly formatted and not empty or malformed (e.g. missing PEM markers, incorrect newline escaping).',\n    };\n  }\n\n  try {\n    const response = await sheets.spreadsheets.get({\n      spreadsheetId: process.env.GOOGLE_SHEET_ID,\n      fields: 'properties.title', \n    });\n\n    if (response.status === 200 && response.data.properties?.title) {\n       revalidatePath('/admin'); // Revalidate on successful test\n      return {\n        success: true,\n        message: 'Connection test successful!',\n        details: `Successfully connected to sheet titled: \"${response.data.properties.title}\". The application should be able to read from and write to this sheet if permissions are correctly set.`,\n      };\n    } else {\n      return {\n        success: false,\n        message: 'Connection test partially successful: Client initialized, but could not retrieve sheet properties.',\n        details: `Received status ${response.status}. This might indicate issues with the Sheet ID or permissions for the service account.`,\n      };\n    }\n  } catch (error: any) {\n    console.error('Google Sheets connection test error:', error);\n    let details = 'An unexpected error occurred during the connection test.';\n    if (error.message) {\n      details = error.message;\n    }\n    if (error.response?.data?.error?.message) {\n        details = error.response.data.error.message;\n    }\n\n    if (details.includes('PERMISSION_DENIED')) {\n        details = `Permission Denied. Ensure the service account (${process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL}) has at least 'Viewer' (for reading) and 'Editor' (for writing) access to the Google Sheet (ID: ${process.env.GOOGLE_SHEET_ID}).`;\n    } else if (details.includes('Requested entity was not found')) {\n        details = `Sheet Not Found. Verify that the GOOGLE_SHEET_ID ('${process.env.GOOGLE_SHEET_ID}') is correct and the sheet exists.`;\n    } else if (details.includes('invalid_grant') || details.includes('Could not load the default credentials')) {\n        details = `Authentication Failed. This can be due to an invalid service account email, an incorrectly formatted or expired private key, or issues with the Google Cloud project setup. Ensure GOOGLE_PRIVATE_KEY is valid.`;\n    } else if (error.message?.includes('error:0A000152:SSL routines::unsafe legacy renegotiation disabled') || error.message?.includes('UNABLE_TO_GET_ISSUER_CERT_LOCALLY')) {\n        details = `SSL/TLS connection issue. This might be a network configuration problem, proxy issue, or an outdated CA certificate store on the server. Original error: ${error.message}`;\n    } else if (error.message?.includes('error:1E08010C:DECODER routines::unsupported') || error.message?.includes('PEM routines') || error.message?.includes('private key') || error.message?.includes('asn1 encoding')) {\n        details = `Private key format error. The GOOGLE_PRIVATE_KEY provided is likely malformed or not a valid PEM key. It should start with '-----BEGIN PRIVATE KEY-----' and end with '-----END PRIVATE KEY-----', with the key content in between. Original error: ${error.message}`;\n    }\n    \n\n    return {\n      success: false,\n      message: 'Connection test failed during API call.',\n      details: details,\n    };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 770, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 844, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/admin-page-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/admin-page-client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/admin-page-client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 858, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/admin-page-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/admin-page-client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/admin-page-client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 872, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 882, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/page.tsx"],"sourcesContent":["\nimport { cookies } from 'next/headers';\nimport { isAuthenticated } from '@/lib/auth';\nimport AdminPageClient from './admin-page-client';\n\nexport default async function AdminPage() {\n  const cookieStore = cookies();\n  const loggedIn = isAuthenticated(cookieStore);\n\n  return <AdminPageClient initialLoggedIn={loggedIn} />;\n}\n\n// Ensure dynamic rendering because authentication depends on cookies\n// and page content can change based on auth state.\nexport const dynamic = 'force-dynamic';\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,cAAc,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAC1B,MAAM,WAAW,CAAA,GAAA,kHAAA,CAAA,kBAAe,AAAD,EAAE;IAEjC,qBAAO,8OAAC,+IAAA,CAAA,UAAe;QAAC,iBAAiB;;;;;;AAC3C;AAIO,MAAM,UAAU","debugId":null}}]
}