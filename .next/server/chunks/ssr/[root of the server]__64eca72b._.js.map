{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/sheets.ts"],"sourcesContent":["'use server';\n\nimport { google } from 'googleapis';\nimport type { sheets_v4 } from 'googleapis';\n\n// Define the structure of a row in your sheet\nexport interface SheetRow {\n  'Donor/Opp': string;\n  'Action/Next Step': string;\n  Lead: string;\n  Priority: 'High' | 'Medium' | 'Low';\n  Probability: 'High' | 'Medium' | 'Low';\n}\n\n// Environment variables\nconst SHEET_ID = process.env.GOOGLE_SHEET_ID;\nconst SERVICE_ACCOUNT_EMAIL = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;\nconst SHEET_RANGE = process.env.GOOGLE_SHEET_RANGE || 'Sheet1!A:E'; // Default range if not specified\n\nlet PRIVATE_KEY: string | undefined;\nconst rawPrivateKeyFromEnv = process.env.GOOGLE_PRIVATE_KEY;\n\nif (typeof rawPrivateKeyFromEnv === 'string' && rawPrivateKeyFromEnv.trim() !== '') {\n    let key = rawPrivateKeyFromEnv.trim();\n    \n    // Strip surrounding quotes if present (common for multi-line env vars copied from JSON strings)\n    if ((key.startsWith('\"') && key.endsWith('\"')) ||\n        (key.startsWith(\"'\") && key.endsWith(\"'\"))) {\n        key = key.substring(1, key.length - 1);\n    }\n\n    // Unescape literal '\\\\n' to actual newline characters.\n    const unescapedKeyRaw = key.replace(/\\\\n/g, '\\n');\n    // Trim whitespace around the entire unescaped block before checking markers.\n    const unescapedKey = unescapedKeyRaw.trim(); \n\n    if (\n        unescapedKey.startsWith('-----BEGIN PRIVATE KEY-----') &&\n        unescapedKey.endsWith('-----END PRIVATE KEY-----') &&\n        unescapedKey.includes('\\n') // Ensure there are actual newlines within the key block\n    ) {\n        const coreKeyContent = unescapedKey\n            .substring('-----BEGIN PRIVATE KEY-----'.length, unescapedKey.length - '-----END PRIVATE KEY-----'.length)\n            .trim();\n        if (coreKeyContent.length > 0) {\n            PRIVATE_KEY = unescapedKey; // Use the trimmed, unescaped key\n            // console.log('Successfully processed GOOGLE_PRIVATE_KEY.');\n        } else {\n            console.warn(\n                'GOOGLE_PRIVATE_KEY warning: Processed key has PEM markers but no content in between. ' +\n                'Original GOOGLE_PRIVATE_KEY (first 30 chars, trimmed): \"' + (rawPrivateKeyFromEnv || \"\").trim().substring(0, 30) + '\". ' +\n                'Sheet operations will likely fail.'\n            );\n            PRIVATE_KEY = undefined;\n        }\n    } else {\n        console.warn(\n            'GOOGLE_PRIVATE_KEY warning: Malformed structure after processing. ' +\n            `Key starts with (after processing and trimming): \"${unescapedKey.substring(0, 30)}...\". ` +\n            `Key ends with (after processing and trimming): \"...${unescapedKey.substring(Math.max(0, unescapedKey.length - 30))}\". ` +\n            `Includes newlines: ${unescapedKey.includes('\\n')}. ` +\n            'Original GOOGLE_PRIVATE_KEY (first 30 chars, trimmed): \"' + (rawPrivateKeyFromEnv || \"\").trim().substring(0, 30) + '\". ' +\n            'Ensure it is a valid PEM key with actual newlines between markers, correctly escaped newlines (\\\\n) if stored as a single line string in .env, and no extraneous characters.'\n        );\n        PRIVATE_KEY = undefined;\n    }\n} else {\n    if (rawPrivateKeyFromEnv === undefined) {\n        // console.log('GOOGLE_PRIVATE_KEY is not set. Sheet operations requiring auth will fail.');\n    } else {\n        console.warn('GOOGLE_PRIVATE_KEY is set but is empty or only whitespace. Sheet operations requiring auth will fail.');\n    }\n    PRIVATE_KEY = undefined;\n}\n\n// Initial check for logging purposes; actual guard is in getSheetsClient\n(() => {\n  const missingVarsWarn = [];\n  if (!SHEET_ID) missingVarsWarn.push('GOOGLE_SHEET_ID');\n  if (!SERVICE_ACCOUNT_EMAIL) missingVarsWarn.push('GOOGLE_SERVICE_ACCOUNT_EMAIL');\n  \n  if (!PRIVATE_KEY && rawPrivateKeyFromEnv && rawPrivateKeyFromEnv.trim() !== '') { \n    missingVarsWarn.push('GOOGLE_PRIVATE_KEY (set but failed processing - see detailed warning above)');\n  } else if (!PRIVATE_KEY && (!rawPrivateKeyFromEnv || rawPrivateKeyFromEnv.trim() === '')) {\n     missingVarsWarn.push('GOOGLE_PRIVATE_KEY (not set or empty)');\n  }\n\n  if (missingVarsWarn.length > 0) {\n    console.warn(\n      `SheetSync Initialization Warning: One or more Google Sheets API credentials are problematic. Sheet operations are likely to fail. Problematic variables: [${missingVarsWarn.join(', ')}]`\n    );\n  }\n})();\n\n\nexport async function getSheetsClient(): Promise<sheets_v4.Sheets | null> {\n  if (!SHEET_ID || !SERVICE_ACCOUNT_EMAIL || !PRIVATE_KEY) {\n    const errorParts = ['Cannot initialize Sheets client due to missing/invalid credentials:'];\n    if (!SHEET_ID) errorParts.push('- GOOGLE_SHEET_ID is not set.');\n    if (!SERVICE_ACCOUNT_EMAIL) errorParts.push('- GOOGLE_SERVICE_ACCOUNT_EMAIL is not set.');\n    \n    if (!PRIVATE_KEY) {\n      if (!rawPrivateKeyFromEnv) errorParts.push('- GOOGLE_PRIVATE_KEY is not set.');\n      else if (rawPrivateKeyFromEnv.trim() === '' || rawPrivateKeyFromEnv.trim() === '\"\"' || rawPrivateKeyFromEnv.trim() === \"''\") errorParts.push('- GOOGLE_PRIVATE_KEY is set but is empty or only whitespace.');\n      else errorParts.push('- GOOGLE_PRIVATE_KEY is set but was malformed or failed structural/PEM checks (see previous warnings for details).');\n    }\n    console.error(errorParts.join('\\n  '));\n    return null;\n  }\n\n  try {\n    const auth = new google.auth.GoogleAuth({\n      credentials: {\n        client_email: SERVICE_ACCOUNT_EMAIL,\n        private_key: PRIVATE_KEY, \n      },\n      scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n    });\n    // console.log('GoogleAuth client initialized successfully.');\n    return google.sheets({ version: 'v4', auth });\n  } catch (error: any) {\n    console.error('CRITICAL Error initializing Google Auth client with processed PRIVATE_KEY:', error.message);\n    const pkPreview = PRIVATE_KEY ? `${PRIVATE_KEY.substring(0, Math.min(40, PRIVATE_KEY.length))}...${PRIVATE_KEY.substring(Math.max(0, PRIVATE_KEY.length - Math.min(40, PRIVATE_KEY.length)))}` : \"PRIVATE_KEY_IS_UNDEFINED\";\n    console.error(`Private key used (preview): ${pkPreview}`);\n    if (error instanceof Error && (error.message.includes('DECODER routines') || error.message.includes('PEM routines') || error.message.includes('private key') || error.message.includes('asn1 encoding'))) {\n        console.error(\n          'This error during auth initialization often indicates an issue with the GOOGLE_PRIVATE_KEY format or value even after initial checks. Ensure it is a valid PEM-formatted private key, with actual newlines if copied from a source that used \\\\n. The key might have passed basic structural checks but is still not parsable by the crypto library.'\n        );\n    }\n    return null;\n  }\n}\n\nexport async function getSheetData(): Promise<SheetRow[]> {\n  const sheets = await getSheetsClient();\n  if (!sheets) {\n     console.warn('getSheetData: Google Sheets client is not available (possibly due to configuration issues). Returning empty data.');\n     return [];\n  }\n  if (!SHEET_ID){ \n    console.warn('getSheetData: GOOGLE_SHEET_ID is not configured. Returning empty data.');\n    return [];\n  }\n\n  try {\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: SHEET_ID,\n      range: SHEET_RANGE,\n    });\n\n    const rows = response.data.values;\n    if (!rows || rows.length === 0) {\n      // console.log('No data found in the specified sheet range or sheet is empty.');\n      return [];\n    }\n\n    const headers = rows[0].map(header => String(header).trim());\n    const dataRows = rows.slice(1);\n\n    const expectedHeaders = ['Donor/Opp', 'Action/Next Step', 'Lead', 'Priority', 'Probability'];\n    const missingHeaders = expectedHeaders.filter(eh => !headers.includes(eh));\n    if (missingHeaders.length > 0) {\n       console.warn(`Sheet is missing expected headers: [${missingHeaders.join(', ')}]. Current headers: [${headers.join(', ')}]. Data mapping might be incorrect or incomplete.`);\n    }\n\n    return dataRows.map((row) => {\n      const rowData: Partial<SheetRow> = {};\n      headers.forEach((header, index) => {\n        const cellValue = row[index] !== undefined && row[index] !== null ? String(row[index]) : ''; \n\n        if (expectedHeaders.includes(header)) { \n            if ((header === 'Priority' || header === 'Probability')) {\n               const value = cellValue.trim();\n               if (['High', 'Medium', 'Low'].includes(value)) {\n                  rowData[header as keyof SheetRow] = value as 'High' | 'Medium' | 'Low';\n               } else {\n                  if (value !== '') {\n                    // console.warn(`Invalid value \"${value}\" for ${header} in row. Defaulting to Medium.`);\n                  }\n                  rowData[header as keyof SheetRow] = 'Medium'; // Default if invalid or empty\n               }\n            } else {\n               rowData[header as keyof SheetRow] = cellValue;\n            }\n        }\n      });\n      // Ensure all expected keys exist, even if not in sheet headers or row is shorter\n      expectedHeaders.forEach(eh => {\n        const key = eh as keyof SheetRow;\n        if (!(key in rowData)) {\n          if (key === 'Priority' || key === 'Probability') {\n            rowData[key] = 'Medium'; \n          } else {\n            rowData[key] = ''; \n          }\n        }\n      });\n      return rowData as SheetRow;\n    }).filter(row => Object.values(row).some(val => typeof val === 'string' && val.trim() !== '')); // Filter out completely empty effective rows\n\n\n  } catch (error: any) {\n    console.error('CRITICAL ERROR in getSheetData:', error); \n    console.error('Error message:', error.message);\n    if (error.stack) console.error('Stack trace:', error.stack);\n    if (error.response?.data) console.error('Google API response error data:', error.response.data);\n    \n    if (error instanceof Error) {\n        if (error.message.includes('PERMISSION_DENIED')) {\n            console.error(`getSheetData Error: Permission denied. Ensure the service account (${SERVICE_ACCOUNT_EMAIL}) has at least read access to the Google Sheet (${SHEET_ID}).`);\n        } else if (error.message.includes('Requested entity was not found')) {\n            console.error(`getSheetData Error: Sheet or range not found. Verify GOOGLE_SHEET_ID (${SHEET_ID}) and GOOGLE_SHEET_RANGE (${SHEET_RANGE}).`);\n        } else if (error.message.includes('UNAUTHENTICATED') || error.message.includes('invalid_grant')) {\n            console.error('getSheetData Error: Authentication failed. This could be due to an invalid service account email, private key, or incorrect project setup.');\n        } else if (error.message.includes('DECODER routines') || error.message.includes('PEM routines')) {\n            console.error('getSheetData Error: A cryptographic error occurred, often related to a malformed private key. Ensure GOOGLE_PRIVATE_KEY is correctly formatted in your environment.');\n        }\n    }\n    return []; \n  }\n}\n\nexport async function appendSheetRow(rowData: Omit<SheetRow, ''>): Promise<boolean> {\n  const sheets = await getSheetsClient();\n   if (!sheets) {\n      console.error(\"Cannot append row: Google Sheets client not available (possibly due to configuration issues).\");\n      return false;\n   }\n   if (!SHEET_ID) { \n     console.error(\"Cannot append row: GOOGLE_SHEET_ID is not configured.\");\n     return false;\n   }\n\n  const values = [\n    rowData['Donor/Opp'],\n    rowData['Action/Next Step'],\n    rowData.Lead,\n    rowData.Priority,\n    rowData.Probability\n  ];\n\n  try {\n    await sheets.spreadsheets.values.append({\n      spreadsheetId: SHEET_ID,\n      range: SHEET_RANGE, \n      valueInputOption: 'USER_ENTERED', \n      insertDataOption: 'INSERT_ROWS', \n      requestBody: {\n        values: [values],\n      },\n    });\n    // console.log('Row appended successfully to Google Sheet.');\n    return true;\n  } catch (error: any) {\n    console.error('Error appending sheet row to Google Sheets API:', error.message);\n     if (error instanceof Error) {\n        if (error.message.includes('PERMISSION_DENIED')) {\n            console.error(`appendSheetRow Error: Permission denied. Ensure the service account (${SERVICE_ACCOUNT_EMAIL}) has write access to the Google Sheet (${SHEET_ID}).`);\n        } else if (error.message.includes('UNAUTHENTICATED') || error.message.includes('invalid_grant')) {\n            console.error('appendSheetRow Error: Authentication failed while appending. Check service account credentials and permissions.');\n        }\n     }\n    return false;\n  }\n}\n\n"],"names":[],"mappings":";;;;;;;AAEA;;;;;AAYA,wBAAwB;AACxB,MAAM,WAAW,QAAQ,GAAG,CAAC,eAAe;AAC5C,MAAM,wBAAwB,QAAQ,GAAG,CAAC,4BAA4B;AACtE,MAAM,cAAc,QAAQ,GAAG,CAAC,kBAAkB,IAAI,cAAc,iCAAiC;AAErG,IAAI;AACJ,MAAM,uBAAuB,QAAQ,GAAG,CAAC,kBAAkB;AAE3D,IAAI,OAAO,yBAAyB,YAAY,qBAAqB,IAAI,OAAO,IAAI;IAChF,IAAI,MAAM,qBAAqB,IAAI;IAEnC,gGAAgG;IAChG,IAAI,AAAC,IAAI,UAAU,CAAC,QAAQ,IAAI,QAAQ,CAAC,QACpC,IAAI,UAAU,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAO;QAC5C,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,MAAM,GAAG;IACxC;IAEA,uDAAuD;IACvD,MAAM,kBAAkB,IAAI,OAAO,CAAC,QAAQ;IAC5C,6EAA6E;IAC7E,MAAM,eAAe,gBAAgB,IAAI;IAEzC,IACI,aAAa,UAAU,CAAC,kCACxB,aAAa,QAAQ,CAAC,gCACtB,aAAa,QAAQ,CAAC,MAAM,wDAAwD;MACtF;QACE,MAAM,iBAAiB,aAClB,SAAS,CAAC,8BAA8B,MAAM,EAAE,aAAa,MAAM,GAAG,4BAA4B,MAAM,EACxG,IAAI;QACT,IAAI,eAAe,MAAM,GAAG,GAAG;YAC3B,cAAc,cAAc,iCAAiC;QAC7D,6DAA6D;QACjE,OAAO;YACH,QAAQ,IAAI,CACR,0FACA,6DAA6D,CAAC,wBAAwB,EAAE,EAAE,IAAI,GAAG,SAAS,CAAC,GAAG,MAAM,QACpH;YAEJ,cAAc;QAClB;IACJ,OAAO;QACH,QAAQ,IAAI,CACR,uEACA,CAAC,kDAAkD,EAAE,aAAa,SAAS,CAAC,GAAG,IAAI,MAAM,CAAC,GAC1F,CAAC,mDAAmD,EAAE,aAAa,SAAS,CAAC,KAAK,GAAG,CAAC,GAAG,aAAa,MAAM,GAAG,KAAK,GAAG,CAAC,GACxH,CAAC,mBAAmB,EAAE,aAAa,QAAQ,CAAC,MAAM,EAAE,CAAC,GACrD,6DAA6D,CAAC,wBAAwB,EAAE,EAAE,IAAI,GAAG,SAAS,CAAC,GAAG,MAAM,QACpH;QAEJ,cAAc;IAClB;AACJ,OAAO;IACH,IAAI,yBAAyB,WAAW;IACpC,4FAA4F;IAChG,OAAO;QACH,QAAQ,IAAI,CAAC;IACjB;IACA,cAAc;AAClB;AAEA,yEAAyE;AACzE,CAAC;IACC,MAAM,kBAAkB,EAAE;IAC1B,IAAI,CAAC,UAAU,gBAAgB,IAAI,CAAC;IACpC,IAAI,CAAC,uBAAuB,gBAAgB,IAAI,CAAC;IAEjD,IAAI,CAAC,eAAe,wBAAwB,qBAAqB,IAAI,OAAO,IAAI;QAC9E,gBAAgB,IAAI,CAAC;IACvB,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,wBAAwB,qBAAqB,IAAI,OAAO,EAAE,GAAG;QACvF,gBAAgB,IAAI,CAAC;IACxB;IAEA,IAAI,gBAAgB,MAAM,GAAG,GAAG;QAC9B,QAAQ,IAAI,CACV,CAAC,0JAA0J,EAAE,gBAAgB,IAAI,CAAC,MAAM,CAAC,CAAC;IAE9L;AACF,CAAC;AAGM,eAAe,uCAAa,GAAb;IACpB,IAAI,CAAC,YAAY,CAAC,yBAAyB,CAAC,aAAa;QACvD,MAAM,aAAa;YAAC;SAAsE;QAC1F,IAAI,CAAC,UAAU,WAAW,IAAI,CAAC;QAC/B,IAAI,CAAC,uBAAuB,WAAW,IAAI,CAAC;QAE5C,IAAI,CAAC,aAAa;YAChB,IAAI,CAAC,sBAAsB,WAAW,IAAI,CAAC;iBACtC,IAAI,qBAAqB,IAAI,OAAO,MAAM,qBAAqB,IAAI,OAAO,QAAQ,qBAAqB,IAAI,OAAO,MAAM,WAAW,IAAI,CAAC;iBACxI,WAAW,IAAI,CAAC;QACvB;QACA,QAAQ,KAAK,CAAC,WAAW,IAAI,CAAC;QAC9B,OAAO;IACT;IAEA,IAAI;QACF,MAAM,OAAO,IAAI,mJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,aAAa;gBACX,cAAc;gBACd,aAAa;YACf;YACA,QAAQ;gBAAC;aAA+C;QAC1D;QACA,8DAA8D;QAC9D,OAAO,mJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;IAC7C,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,8EAA8E,MAAM,OAAO;QACzG,MAAM,YAAY,cAAc,GAAG,YAAY,SAAS,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,YAAY,MAAM,GAAG,GAAG,EAAE,YAAY,SAAS,CAAC,KAAK,GAAG,CAAC,GAAG,YAAY,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,YAAY,MAAM,KAAK,GAAG;QACjM,QAAQ,KAAK,CAAC,CAAC,4BAA4B,EAAE,WAAW;QACxD,IAAI,iBAAiB,SAAS,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,uBAAuB,MAAM,OAAO,CAAC,QAAQ,CAAC,mBAAmB,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB,MAAM,OAAO,CAAC,QAAQ,CAAC,gBAAgB,GAAG;YACtM,QAAQ,KAAK,CACX;QAEN;QACA,OAAO;IACT;AACF;AAEO,eAAe,uCAAU,GAAV;IACpB,MAAM,SAAS,MAAM;IACrB,IAAI,CAAC,QAAQ;QACV,QAAQ,IAAI,CAAC;QACb,OAAO,EAAE;IACZ;IACA,IAAI,CAAC,UAAS;QACZ,QAAQ,IAAI,CAAC;QACb,OAAO,EAAE;IACX;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,eAAe;YACf,OAAO;QACT;QAEA,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM;QACjC,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,GAAG;YAC9B,gFAAgF;YAChF,OAAO,EAAE;QACX;QAEA,MAAM,UAAU,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA,SAAU,OAAO,QAAQ,IAAI;QACzD,MAAM,WAAW,KAAK,KAAK,CAAC;QAE5B,MAAM,kBAAkB;YAAC;YAAa;YAAoB;YAAQ;YAAY;SAAc;QAC5F,MAAM,iBAAiB,gBAAgB,MAAM,CAAC,CAAA,KAAM,CAAC,QAAQ,QAAQ,CAAC;QACtE,IAAI,eAAe,MAAM,GAAG,GAAG;YAC5B,QAAQ,IAAI,CAAC,CAAC,oCAAoC,EAAE,eAAe,IAAI,CAAC,MAAM,qBAAqB,EAAE,QAAQ,IAAI,CAAC,MAAM,iDAAiD,CAAC;QAC7K;QAEA,OAAO,SAAS,GAAG,CAAC,CAAC;YACnB,MAAM,UAA6B,CAAC;YACpC,QAAQ,OAAO,CAAC,CAAC,QAAQ;gBACvB,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,aAAa,GAAG,CAAC,MAAM,KAAK,OAAO,OAAO,GAAG,CAAC,MAAM,IAAI;gBAEzF,IAAI,gBAAgB,QAAQ,CAAC,SAAS;oBAClC,IAAK,WAAW,cAAc,WAAW,eAAgB;wBACtD,MAAM,QAAQ,UAAU,IAAI;wBAC5B,IAAI;4BAAC;4BAAQ;4BAAU;yBAAM,CAAC,QAAQ,CAAC,QAAQ;4BAC5C,OAAO,CAAC,OAAyB,GAAG;wBACvC,OAAO;4BACJ,IAAI,UAAU,IAAI;4BAChB,wFAAwF;4BAC1F;4BACA,OAAO,CAAC,OAAyB,GAAG,UAAU,8BAA8B;wBAC/E;oBACH,OAAO;wBACJ,OAAO,CAAC,OAAyB,GAAG;oBACvC;gBACJ;YACF;YACA,iFAAiF;YACjF,gBAAgB,OAAO,CAAC,CAAA;gBACtB,MAAM,MAAM;gBACZ,IAAI,CAAC,CAAC,OAAO,OAAO,GAAG;oBACrB,IAAI,QAAQ,cAAc,QAAQ,eAAe;wBAC/C,OAAO,CAAC,IAAI,GAAG;oBACjB,OAAO;wBACL,OAAO,CAAC,IAAI,GAAG;oBACjB;gBACF;YACF;YACA,OAAO;QACT,GAAG,MAAM,CAAC,CAAA,MAAO,OAAO,MAAM,CAAC,KAAK,IAAI,CAAC,CAAA,MAAO,OAAO,QAAQ,YAAY,IAAI,IAAI,OAAO,MAAM,6CAA6C;IAG/I,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,mCAAmC;QACjD,QAAQ,KAAK,CAAC,kBAAkB,MAAM,OAAO;QAC7C,IAAI,MAAM,KAAK,EAAE,QAAQ,KAAK,CAAC,gBAAgB,MAAM,KAAK;QAC1D,IAAI,MAAM,QAAQ,EAAE,MAAM,QAAQ,KAAK,CAAC,mCAAmC,MAAM,QAAQ,CAAC,IAAI;QAE9F,IAAI,iBAAiB,OAAO;YACxB,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,sBAAsB;gBAC7C,QAAQ,KAAK,CAAC,CAAC,mEAAmE,EAAE,sBAAsB,gDAAgD,EAAE,SAAS,EAAE,CAAC;YAC5K,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,mCAAmC;gBACjE,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,SAAS,0BAA0B,EAAE,YAAY,EAAE,CAAC;YAC/I,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,sBAAsB,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB;gBAC7F,QAAQ,KAAK,CAAC;YAClB,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,uBAAuB,MAAM,OAAO,CAAC,QAAQ,CAAC,iBAAiB;gBAC7F,QAAQ,KAAK,CAAC;YAClB;QACJ;QACA,OAAO,EAAE;IACX;AACF;AAEO,eAAe,uCAAY,GAAZ,eAAe,OAA2B;IAC9D,MAAM,SAAS,MAAM;IACpB,IAAI,CAAC,QAAQ;QACV,QAAQ,KAAK,CAAC;QACd,OAAO;IACV;IACA,IAAI,CAAC,UAAU;QACb,QAAQ,KAAK,CAAC;QACd,OAAO;IACT;IAED,MAAM,SAAS;QACb,OAAO,CAAC,YAAY;QACpB,OAAO,CAAC,mBAAmB;QAC3B,QAAQ,IAAI;QACZ,QAAQ,QAAQ;QAChB,QAAQ,WAAW;KACpB;IAED,IAAI;QACF,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC;YACtC,eAAe;YACf,OAAO;YACP,kBAAkB;YAClB,kBAAkB;YAClB,aAAa;gBACX,QAAQ;oBAAC;iBAAO;YAClB;QACF;QACA,6DAA6D;QAC7D,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,mDAAmD,MAAM,OAAO;QAC7E,IAAI,iBAAiB,OAAO;YACzB,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,sBAAsB;gBAC7C,QAAQ,KAAK,CAAC,CAAC,qEAAqE,EAAE,sBAAsB,wCAAwC,EAAE,SAAS,EAAE,CAAC;YACtK,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,sBAAsB,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB;gBAC7F,QAAQ,KAAK,CAAC;YAClB;QACH;QACD,OAAO;IACT;AACF;;;IAzKsB;IAsCA;IAyFA;;AA/HA,+OAAA;AAsCA,+OAAA;AAyFA,+OAAA","debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/validators.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, 'Username is required'),\n  password: z.string().min(1, 'Password is required'),\n});\n\nexport type LoginFormData = z.infer<typeof loginSchema>;\n\nexport const sheetRowSchema = z.object({\n  'Donor/Opp': z.string().min(1, 'Donor/Opportunity is required'),\n  'Action/Next Step': z.string().min(1, 'Action/Next Step is required'),\n  Lead: z.string().min(1, 'Lead is required'),\n  Priority: z.enum(['High', 'Medium', 'Low'], {\n    errorMap: () => ({ message: 'Please select a valid priority' }),\n  }),\n  Probability: z.enum(['High', 'Medium', 'Low'], {\n    errorMap: () => ({ message: 'Please select a valid probability' }),\n  }),\n});\n\nexport type SheetRowFormData = z.infer<typeof sheetRowSchema>;\n\n// Schema for Google Sheet Configuration Form\nexport const sheetConfigSchema = z.object({\n    sheetId: z.string().min(10, 'Sheet ID seems too short. Please check the copied ID.').trim(),\n    sheetRange: z.string()\n                .min(3, 'Sheet range is required (e.g., Sheet1!A:E)')\n                .regex(/^[a-zA-Z0-9\\s]+!([A-Z]+):([A-Z]+)$/, 'Invalid range format. Expected format like \"Sheet1!A:E\" with uppercase column letters.'),\n    serviceAccountEmail: z.string().email('Invalid service account email format. Please enter a valid email address.'),\n    privateKey: z.string()\n        .transform(keyInput => {\n            let key = keyInput.trim(); // Trim outer whitespace first\n\n            // If the entire pasted content is enclosed in quotes (single or double), remove them\n            if ((key.startsWith('\"') && key.endsWith('\"')) || (key.startsWith(\"'\") && key.endsWith(\"'\"))) {\n                key = key.substring(1, key.length - 1);\n            }\n            \n            // Now key should be the raw content, possibly with \\n escapes from JSON string\n            // Unescape literal \"\\\\n\" to actual newline characters.\n            key = key.replace(/\\\\n/g, '\\n');\n            // Normalize Windows-style newlines (\\r\\n) to Unix-style newlines (\\n).\n            key = key.replace(/\\r\\n/g, '\\n');\n            // It's important NOT to trim() here again if the PEM block itself has leading/trailing newlines within its structure,\n            // but the startsWith/endsWith checks in the pipe will handle the structural integrity.\n            // However, a final trim of the (now unescaped) block can be safe if PEM content itself doesn't rely on outer blank lines.\n            // For safety and to match typical PEM format, we'll trim one last time.\n            return key.trim();\n        })\n        .pipe(\n            z.string()\n            .min(100, 'Private key is too short. Ensure you have copied the full key from the JSON file.')\n            .startsWith('-----BEGIN PRIVATE KEY-----', 'Private key must start with \"-----BEGIN PRIVATE KEY-----\". Check for missing parts or extra characters at the beginning.')\n            .endsWith('-----END PRIVATE KEY-----', 'Private key must end with \"-----END PRIVATE KEY-----\". Check for missing parts or extra characters at the end.')\n            .refine(key => key.includes('\\n'), { message: \"Private key must be a multi-line string. Ensure newlines are preserved when copying or that '\\\\n' sequences were correctly unescaped.\" })\n            .refine(key => {\n                // Check for common errors like pasting the entire JSON key-value pair.\n                // These checks are against the transformed key (outer quotes and \\n should be handled).\n                if (key.includes('\"private_key\":') || key.includes(\"'private_key':\")) {\n                    return false;\n                }\n                // Ensure there's content between the header and footer\n                const coreKey = key.replace('-----BEGIN PRIVATE KEY-----', '').replace('-----END PRIVATE KEY-----', '').trim();\n                return coreKey.length > 0;\n            }, {message: \"It looks like you might have pasted more than just the private key string, or the key content between PEM markers is empty.\"})\n        ),\n});\n\nexport type SheetConfigFormData = z.infer<typeof sheetConfigSchema>;\n"],"names":[],"mappings":";;;;;AAAA;;AAEO,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,MAAM,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACtC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,UAAU,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAM,EAAE;QAC1C,UAAU,IAAM,CAAC;gBAAE,SAAS;YAAiC,CAAC;IAChE;IACA,aAAa,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAM,EAAE;QAC7C,UAAU,IAAM,CAAC;gBAAE,SAAS;YAAoC,CAAC;IACnE;AACF;AAKO,MAAM,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,yDAAyD,IAAI;IACzF,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GACP,GAAG,CAAC,GAAG,8CACP,KAAK,CAAC,sCAAsC;IACzD,qBAAqB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACtC,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GACf,SAAS,CAAC,CAAA;QACP,IAAI,MAAM,SAAS,IAAI,IAAI,8BAA8B;QAEzD,qFAAqF;QACrF,IAAI,AAAC,IAAI,UAAU,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAU,IAAI,UAAU,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAO;YAC1F,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,MAAM,GAAG;QACxC;QAEA,+EAA+E;QAC/E,uDAAuD;QACvD,MAAM,IAAI,OAAO,CAAC,QAAQ;QAC1B,uEAAuE;QACvE,MAAM,IAAI,OAAO,CAAC,SAAS;QAC3B,sHAAsH;QACtH,uFAAuF;QACvF,0HAA0H;QAC1H,wEAAwE;QACxE,OAAO,IAAI,IAAI;IACnB,GACC,IAAI,CACD,oIAAA,CAAA,IAAC,CAAC,MAAM,GACP,GAAG,CAAC,KAAK,qFACT,UAAU,CAAC,+BAA+B,4HAC1C,QAAQ,CAAC,6BAA6B,kHACtC,MAAM,CAAC,CAAA,MAAO,IAAI,QAAQ,CAAC,OAAO;QAAE,SAAS;IAAwI,GACrL,MAAM,CAAC,CAAA;QACJ,uEAAuE;QACvE,wFAAwF;QACxF,IAAI,IAAI,QAAQ,CAAC,qBAAqB,IAAI,QAAQ,CAAC,mBAAmB;YAClE,OAAO;QACX;QACA,uDAAuD;QACvD,MAAM,UAAU,IAAI,OAAO,CAAC,+BAA+B,IAAI,OAAO,CAAC,6BAA6B,IAAI,IAAI;QAC5G,OAAO,QAAQ,MAAM,GAAG;IAC5B,GAAG;QAAC,SAAS;IAA6H;AAEtJ","debugId":null}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport type { ReadonlyRequestCookies } from 'next/dist/server/web/spec-extension/adapters/request-cookies';\n\nconst AUTH_COOKIE_NAME = 'sheetsync_auth';\nconst ADMIN_USERNAME = process.env.ADMIN_USERNAME;\nconst ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;\n\nif (!ADMIN_USERNAME || !ADMIN_PASSWORD) {\n  console.warn('Admin credentials are not set in environment variables. Admin login will not work.');\n}\n\nexport function checkCredentials(username?: string | null, password?: string | null): boolean {\n  if (!ADMIN_USERNAME || !ADMIN_PASSWORD) {\n    return false; // Cannot authenticate if credentials aren't set\n  }\n  return username === ADMIN_USERNAME && password === ADMIN_PASSWORD;\n}\n\nexport async function setAuthCookie(): Promise<void> {\n  const cookieStore = cookies();\n  cookieStore.set(AUTH_COOKIE_NAME, 'true', {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    path: '/admin', // Restrict cookie to admin paths\n    sameSite: 'lax',\n    maxAge: 60 * 60 * 24, // 24 hours validity\n  });\n}\n\nexport async function clearAuthCookie(): Promise<void> {\n  const cookieStore = cookies();\n  cookieStore.delete(AUTH_COOKIE_NAME);\n}\n\nexport function isAuthenticated(cookieStore?: ReadonlyRequestCookies): boolean {\n  const store = cookieStore || cookies();\n  const authCookie = store.get(AUTH_COOKIE_NAME);\n  return authCookie?.value === 'true';\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAGA,MAAM,mBAAmB;AACzB,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AACjD,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AAEjD,IAAI,CAAC,kBAAkB,CAAC,gBAAgB;IACtC,QAAQ,IAAI,CAAC;AACf;AAEO,SAAS,iBAAiB,QAAwB,EAAE,QAAwB;IACjF,IAAI,CAAC,kBAAkB,CAAC,gBAAgB;QACtC,OAAO,OAAO,gDAAgD;IAChE;IACA,OAAO,aAAa,kBAAkB,aAAa;AACrD;AAEO,eAAe;IACpB,MAAM,cAAc,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAC1B,YAAY,GAAG,CAAC,kBAAkB,QAAQ;QACxC,UAAU;QACV,QAAQ,oDAAyB;QACjC,MAAM;QACN,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;AACF;AAEO,eAAe;IACpB,MAAM,cAAc,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAC1B,YAAY,MAAM,CAAC;AACrB;AAEO,SAAS,gBAAgB,WAAoC;IAClE,MAAM,QAAQ,eAAe,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IACnC,MAAM,aAAa,MAAM,GAAG,CAAC;IAC7B,OAAO,YAAY,UAAU;AAC/B","debugId":null}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { cookies } from 'next/headers';\nimport { appendSheetRow, getSheetsClient } from '@/lib/sheets';\nimport { sheetRowSchema, loginSchema, sheetConfigSchema, type SheetRowFormData, type LoginFormData, type SheetConfigFormData } from '@/lib/validators';\nimport { checkCredentials, setAuthCookie, clearAuthCookie } from '@/lib/auth';\n\nexport interface FormState {\n  success: boolean;\n  message: string;\n  errors?: Record<string, string[]>;\n  details?: string; // For connection test and config preview\n}\n\nexport async function submitDataAction(\n  prevState: FormState | null,\n  formData: FormData\n): Promise<FormState> {\n  try {\n    const rawData = Object.fromEntries(formData.entries());\n    const validatedFields = sheetRowSchema.safeParse(rawData);\n\n    if (!validatedFields.success) {\n      return {\n        success: false,\n        message: 'Invalid form data. Please check the fields.',\n        errors: validatedFields.error.flatten().fieldErrors,\n      };\n    }\n\n    const dataToAppend: SheetRowFormData = validatedFields.data;\n\n    const success = await appendSheetRow(dataToAppend);\n\n    if (success) {\n      revalidatePath('/'); // Revalidate home page to show new data\n      revalidatePath('/admin'); // Revalidate admin page if it displays data\n      return {\n        success: true,\n        message: 'Data submitted successfully!',\n      };\n    } else {\n      return {\n        success: false,\n        message: 'Failed to submit data to Google Sheet. Check server logs for details.',\n      };\n    }\n  } catch (error) {\n    console.error('Error in submitDataAction:', error);\n    let errorMessage = 'An unexpected error occurred during submission.';\n    if (error instanceof Error) {\n        errorMessage = error.message;\n    }\n    return {\n      success: false,\n      message: errorMessage,\n    };\n  }\n}\n\nexport async function loginAction(\n  prevState: FormState | null,\n  formData: FormData\n): Promise<FormState> {\n  try {\n    const rawData = Object.fromEntries(formData.entries());\n    const validatedFields = loginSchema.safeParse(rawData);\n\n    if (!validatedFields.success) {\n      return {\n        success: false,\n        message: 'Invalid login data. Please check your input.',\n        errors: validatedFields.error.flatten().fieldErrors,\n      };\n    }\n\n    const { username, password } = validatedFields.data;\n\n    if (checkCredentials(username, password)) {\n      await setAuthCookie();\n      revalidatePath('/admin');\n      return {\n        success: true,\n        message: 'Login successful!',\n      };\n    } else {\n      return {\n        success: false,\n        message: 'Invalid username or password.',\n      };\n    }\n  } catch (error) {\n    console.error('Error in loginAction:', error);\n    return {\n      success: false,\n      message: 'An unexpected error occurred during login.',\n    };\n  }\n}\n\nexport async function logoutAction(): Promise<void> {\n  try {\n    await clearAuthCookie();\n    revalidatePath('/admin');\n  } catch (error) {\n    console.error('Error in logoutAction:', error);\n    // Optionally, return a FormState if you want to display messages,\n    // but typically logout redirects or revalidates silently.\n  }\n}\n\n\nexport async function saveSheetConfigAction(\n  prevState: FormState | null,\n  formData: FormData\n): Promise<FormState> {\n  try {\n    const rawData = Object.fromEntries(formData.entries());\n    const validatedFields = sheetConfigSchema.safeParse(rawData);\n\n    if (!validatedFields.success) {\n      return {\n        success: false,\n        message: 'Invalid configuration data. Please check the fields.',\n        errors: validatedFields.error.flatten().fieldErrors,\n      };\n    }\n    \n    // This action doesn't actually save to a file on the server.\n    // It validates the input and confirms to the user.\n    // The user is responsible for updating .env.local and restarting.\n    return {\n      success: true,\n      message: 'Configuration data is valid. Please copy the generated .env.local content, update your file, and restart the server for changes to take effect.',\n      details: 'Validation successful. Manual update of .env.local required.',\n    };\n  } catch (error) {\n    console.error('Error in saveSheetConfigAction:', error);\n    let errorMessage = 'An unexpected error occurred while validating configuration.';\n     if (error instanceof Error) {\n        errorMessage = error.message;\n    }\n    return {\n      success: false,\n      message: errorMessage,\n    };\n  }\n}\n\n\nexport async function testSheetConnectionAction(prevState: FormState | null): Promise<FormState> {\n  try {\n    const sheets = await getSheetsClient();\n    if (!sheets) {\n      return {\n        success: false,\n        message: 'Failed to initialize Google Sheets client.',\n        details: 'This usually means one or more GOOGLE_ environment variables (SHEET_ID, SERVICE_ACCOUNT_EMAIL, PRIVATE_KEY) are missing, empty, or malformed in your server environment. Please check your .env.local file (and restart the server if you made changes) or your hosting provider\\'s environment variable settings.',\n      };\n    }\n\n    // Attempt a simple read operation to test the connection and permissions.\n    // Fetching spreadsheet properties is a lightweight way to do this.\n    const spreadsheetId = process.env.GOOGLE_SHEET_ID;\n    if (!spreadsheetId) {\n        return {\n            success: false,\n            message: 'GOOGLE_SHEET_ID is not defined in environment variables.',\n            details: 'The connection test requires GOOGLE_SHEET_ID to be set to attempt fetching spreadsheet properties.'\n        }\n    }\n\n    await sheets.spreadsheets.get({ spreadsheetId });\n    // If the above call doesn't throw, the connection and basic permissions are likely okay.\n    return {\n      success: true,\n      message: 'Successfully connected to Google Sheets and accessed spreadsheet properties.',\n      details: `Successfully connected to Sheet ID: ${spreadsheetId}. Service Account: ${process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL}`\n    };\n\n  } catch (error: any) {\n    console.error('Error testing Google Sheet connection:', error);\n    let errorMessage = 'Failed to connect to Google Sheets.';\n    let errorDetails = 'An unexpected error occurred.';\n\n    if (error.message) {\n        errorMessage += ` Details: ${error.message}`;\n    }\n    \n    if (error.message?.includes('PERMISSION_DENIED')) {\n        errorDetails = `The service account ${process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || 'configured service account'} does not have permission to access the Google Sheet (ID: ${process.env.GOOGLE_SHEET_ID || 'configured sheet ID'}). Ensure the service account has at least \"Viewer\" access to the sheet.`;\n    } else if (error.message?.includes('Requested entity was not found')) {\n        errorDetails = `The Google Sheet with ID (${process.env.GOOGLE_SHEET_ID || 'configured sheet ID'}) was not found. Please verify the GOOGLE_SHEET_ID.`;\n    } else if (error.message?.includes('UNAUTHENTICATED') || error.message?.includes('invalid_grant')) {\n        errorDetails = 'Authentication failed. This could be due to an invalid/expired service account email, a malformed or incorrect private key, or issues with Google Cloud project setup or API enablement.';\n    } else if (error.message?.includes('ENOTFOUND') || error.message?.includes('EAI_AGAIN')) {\n        errorDetails = 'Network error: Could not resolve hostname. Check internet connectivity and DNS settings on the server.';\n    } else if (error.message?.includes('socket hang up') || error.message?.includes('ECONNRESET')) {\n        errorDetails = 'Network error: Connection was reset or timed out. This could be a temporary network issue or firewall restriction.';\n    } else if (error.message?.includes('DECODER routines') || error.message?.includes('PEM routines') || error.message?.includes('private key') || error.message?.includes('asn1 encoding')) {\n        errorDetails = 'Error related to the private key. The GOOGLE_PRIVATE_KEY is likely malformed or corrupted, even if it passed initial structural checks. Ensure it is a valid PEM-formatted key copied correctly, with newlines preserved (or correctly escaped as \\\\n if stored as a single line string).';\n    } else if (process.env.GOOGLE_SHEET_ID && error.message?.includes(process.env.GOOGLE_SHEET_ID)) {\n         // If the sheet ID is in the error, it might be a specific sheet access issue.\n        errorDetails = `An error occurred while trying to access sheet ID ${process.env.GOOGLE_SHEET_ID}: ${error.message}`;\n    } else {\n        errorDetails = error.message || 'No further details available. Check server logs.';\n    }\n\n\n    return {\n      success: false,\n      message: errorMessage,\n      details: errorDetails,\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;AAGA;AAEA;AACA;AACA;;;;;;;;AASO,eAAe,uCAAc,GAAd,iBACpB,SAA2B,EAC3B,QAAkB;IAElB,IAAI;QACF,MAAM,UAAU,OAAO,WAAW,CAAC,SAAS,OAAO;QACnD,MAAM,kBAAkB,wHAAA,CAAA,iBAAc,CAAC,SAAS,CAAC;QAEjD,IAAI,CAAC,gBAAgB,OAAO,EAAE;YAC5B,OAAO;gBACL,SAAS;gBACT,SAAS;gBACT,QAAQ,gBAAgB,KAAK,CAAC,OAAO,GAAG,WAAW;YACrD;QACF;QAEA,MAAM,eAAiC,gBAAgB,IAAI;QAE3D,MAAM,UAAU,MAAM,CAAA,GAAA,oHAAA,CAAA,iBAAc,AAAD,EAAE;QAErC,IAAI,SAAS;YACX,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,wCAAwC;YAC7D,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,WAAW,4CAA4C;YACtE,OAAO;gBACL,SAAS;gBACT,SAAS;YACX;QACF,OAAO;YACL,OAAO;gBACL,SAAS;gBACT,SAAS;YACX;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,IAAI,eAAe;QACnB,IAAI,iBAAiB,OAAO;YACxB,eAAe,MAAM,OAAO;QAChC;QACA,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF;AACF;AAEO,eAAe,uCAAS,GAAT,YACpB,SAA2B,EAC3B,QAAkB;IAElB,IAAI;QACF,MAAM,UAAU,OAAO,WAAW,CAAC,SAAS,OAAO;QACnD,MAAM,kBAAkB,wHAAA,CAAA,cAAW,CAAC,SAAS,CAAC;QAE9C,IAAI,CAAC,gBAAgB,OAAO,EAAE;YAC5B,OAAO;gBACL,SAAS;gBACT,SAAS;gBACT,QAAQ,gBAAgB,KAAK,CAAC,OAAO,GAAG,WAAW;YACrD;QACF;QAEA,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,gBAAgB,IAAI;QAEnD,IAAI,CAAA,GAAA,kHAAA,CAAA,mBAAgB,AAAD,EAAE,UAAU,WAAW;YACxC,MAAM,CAAA,GAAA,kHAAA,CAAA,gBAAa,AAAD;YAClB,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;YACf,OAAO;gBACL,SAAS;gBACT,SAAS;YACX;QACF,OAAO;YACL,OAAO;gBACL,SAAS;gBACT,SAAS;YACX;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF;AACF;AAEO,eAAe,uCAAU,GAAV;IACpB,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,kBAAe,AAAD;QACpB,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACjB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;IACxC,kEAAkE;IAClE,0DAA0D;IAC5D;AACF;AAGO,eAAe,uCAAmB,GAAnB,sBACpB,SAA2B,EAC3B,QAAkB;IAElB,IAAI;QACF,MAAM,UAAU,OAAO,WAAW,CAAC,SAAS,OAAO;QACnD,MAAM,kBAAkB,wHAAA,CAAA,oBAAiB,CAAC,SAAS,CAAC;QAEpD,IAAI,CAAC,gBAAgB,OAAO,EAAE;YAC5B,OAAO;gBACL,SAAS;gBACT,SAAS;gBACT,QAAQ,gBAAgB,KAAK,CAAC,OAAO,GAAG,WAAW;YACrD;QACF;QAEA,6DAA6D;QAC7D,mDAAmD;QACnD,kEAAkE;QAClE,OAAO;YACL,SAAS;YACT,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,IAAI,eAAe;QAClB,IAAI,iBAAiB,OAAO;YACzB,eAAe,MAAM,OAAO;QAChC;QACA,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF;AACF;AAGO,eAAe,uCAAuB,GAAvB,0BAA0B,SAA2B;IACzE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,oHAAA,CAAA,kBAAe,AAAD;QACnC,IAAI,CAAC,QAAQ;YACX,OAAO;gBACL,SAAS;gBACT,SAAS;gBACT,SAAS;YACX;QACF;QAEA,0EAA0E;QAC1E,mEAAmE;QACnE,MAAM,gBAAgB,QAAQ,GAAG,CAAC,eAAe;QACjD,IAAI,CAAC,eAAe;YAChB,OAAO;gBACH,SAAS;gBACT,SAAS;gBACT,SAAS;YACb;QACJ;QAEA,MAAM,OAAO,YAAY,CAAC,GAAG,CAAC;YAAE;QAAc;QAC9C,yFAAyF;QACzF,OAAO;YACL,SAAS;YACT,SAAS;YACT,SAAS,CAAC,oCAAoC,EAAE,cAAc,mBAAmB,EAAE,QAAQ,GAAG,CAAC,4BAA4B,EAAE;QAC/H;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,0CAA0C;QACxD,IAAI,eAAe;QACnB,IAAI,eAAe;QAEnB,IAAI,MAAM,OAAO,EAAE;YACf,gBAAgB,CAAC,UAAU,EAAE,MAAM,OAAO,EAAE;QAChD;QAEA,IAAI,MAAM,OAAO,EAAE,SAAS,sBAAsB;YAC9C,eAAe,CAAC,oBAAoB,EAAE,QAAQ,GAAG,CAAC,4BAA4B,IAAI,6BAA6B,0DAA0D,EAAE,QAAQ,GAAG,CAAC,eAAe,IAAI,sBAAsB,wEAAwE,CAAC;QAC7S,OAAO,IAAI,MAAM,OAAO,EAAE,SAAS,mCAAmC;YAClE,eAAe,CAAC,0BAA0B,EAAE,QAAQ,GAAG,CAAC,eAAe,IAAI,sBAAsB,mDAAmD,CAAC;QACzJ,OAAO,IAAI,MAAM,OAAO,EAAE,SAAS,sBAAsB,MAAM,OAAO,EAAE,SAAS,kBAAkB;YAC/F,eAAe;QACnB,OAAO,IAAI,MAAM,OAAO,EAAE,SAAS,gBAAgB,MAAM,OAAO,EAAE,SAAS,cAAc;YACrF,eAAe;QACnB,OAAO,IAAI,MAAM,OAAO,EAAE,SAAS,qBAAqB,MAAM,OAAO,EAAE,SAAS,eAAe;YAC3F,eAAe;QACnB,OAAO,IAAI,MAAM,OAAO,EAAE,SAAS,uBAAuB,MAAM,OAAO,EAAE,SAAS,mBAAmB,MAAM,OAAO,EAAE,SAAS,kBAAkB,MAAM,OAAO,EAAE,SAAS,kBAAkB;YACrL,eAAe;QACnB,OAAO,IAAI,QAAQ,GAAG,CAAC,eAAe,IAAI,MAAM,OAAO,EAAE,SAAS,QAAQ,GAAG,CAAC,eAAe,GAAG;YAC3F,8EAA8E;YAC/E,eAAe,CAAC,kDAAkD,EAAE,QAAQ,GAAG,CAAC,eAAe,CAAC,EAAE,EAAE,MAAM,OAAO,EAAE;QACvH,OAAO;YACH,eAAe,MAAM,OAAO,IAAI;QACpC;QAGA,OAAO;YACL,SAAS;YACT,SAAS;YACT,SAAS;QACX;IACF;AACF;;;IAzMsB;IA8CA;IAwCA;IAYA;IAsCA;;AAxIA,+OAAA;AA8CA,+OAAA;AAwCA,+OAAA;AAYA,+OAAA;AAsCA,+OAAA","debugId":null}},
    {"offset": {"line": 766, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 852, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/admin-page-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/admin-page-client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/admin-page-client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 866, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/admin-page-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/admin-page-client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/admin-page-client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 880, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 890, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/page.tsx"],"sourcesContent":["\nimport { cookies } from 'next/headers';\nimport { isAuthenticated } from '@/lib/auth';\nimport AdminPageClient from './admin-page-client';\n\nexport default async function AdminPage() {\n  const cookieStore = cookies();\n  const loggedIn = isAuthenticated(cookieStore);\n\n  return <AdminPageClient initialLoggedIn={loggedIn} />;\n}\n\n// Ensure dynamic rendering because authentication depends on cookies\n// and page content can change based on auth state.\nexport const dynamic = 'force-dynamic';\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,cAAc,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAC1B,MAAM,WAAW,CAAA,GAAA,kHAAA,CAAA,kBAAe,AAAD,EAAE;IAEjC,qBAAO,8OAAC,+IAAA,CAAA,UAAe;QAAC,iBAAiB;;;;;;AAC3C;AAIO,MAAM,UAAU","debugId":null}}]
}